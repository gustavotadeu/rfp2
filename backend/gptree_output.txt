# Project Directory Structure:
.
├── .env
├── .env.example
├── .gptree_config
├── Dockerfile
├── auth.py
├── database.py
├── main.py
├── models.py
├── requirements.txt
├── routers/
│   ├── auth_router.py
│   ├── bom_router.py
│   ├── propostas_router.py
│   ├── rfps_router.py
│   ├── users_router.py
│   └── vendors_router.py
└── test.py

# BEGIN FILE CONTENTS

# File: database.py

import os
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

load_dotenv()

DB_USER = os.getenv('POSTGRES_USER', 'rfp_user')
DB_PASS = os.getenv('POSTGRES_PASSWORD', 'rfp_pass')
DB_HOST = os.getenv('POSTGRES_HOST', 'localhost')
DB_PORT = os.getenv('POSTGRES_PORT', '5432')
DB_NAME = os.getenv('POSTGRES_DB', 'rfp_db')

SQLALCHEMY_DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


# END FILE CONTENTS


# File: routers/propostas_router.py

from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File
from sqlalchemy.orm import Session
from typing import List
from models import Proposta, User, RFP
from auth import get_db, get_current_user
from pydantic import BaseModel
import os
import shutil

class PropostaCreate(BaseModel):
    dados_json: str = None
    arquivo_pdf: str = None
    arquivo_docx: str = None

class PropostaUpdate(BaseModel):
    dados_json: str = None
    arquivo_pdf: str = None
    arquivo_docx: str = None

router = APIRouter(prefix="/propostas", tags=["propostas"])

@router.get("/rfp/{rfp_id}", response_model=List[PropostaCreate])
def list_propostas(rfp_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    propostas = db.query(Proposta).filter(Proposta.rfp_id == rfp_id).all()
    return propostas

@router.post("/rfp/{rfp_id}", response_model=PropostaCreate)
def create_proposta(rfp_id: int, proposta: PropostaCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    rfp = db.query(RFP).filter(RFP.id == rfp_id).first()
    if not rfp:
        raise HTTPException(status_code=404, detail="RFP não encontrada")
    new_proposta = Proposta(rfp_id=rfp_id, **proposta.dict())
    db.add(new_proposta)
    db.commit()
    db.refresh(new_proposta)
    return new_proposta

@router.get("/item/{proposta_id}", response_model=PropostaCreate)
def get_proposta(proposta_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    proposta = db.query(Proposta).filter(Proposta.id == proposta_id).first()
    if not proposta:
        raise HTTPException(status_code=404, detail="Proposta não encontrada")
    return proposta

@router.put("/item/{proposta_id}", response_model=PropostaCreate)
def update_proposta(proposta_id: int, proposta_update: PropostaUpdate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    proposta = db.query(Proposta).filter(Proposta.id == proposta_id).first()
    if not proposta:
        raise HTTPException(status_code=404, detail="Proposta não encontrada")
    for field, value in proposta_update.dict(exclude_unset=True).items():
        setattr(proposta, field, value)
    db.commit()
    db.refresh(proposta)
    return proposta

@router.delete("/item/{proposta_id}")
def delete_proposta(proposta_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    proposta = db.query(Proposta).filter(Proposta.id == proposta_id).first()
    if not proposta:
        raise HTTPException(status_code=404, detail="Proposta não encontrada")
    db.delete(proposta)
    db.commit()
    return {"ok": True}

@router.post("/item/{proposta_id}/upload_pdf")
def upload_proposta_pdf(proposta_id: int, file: UploadFile = File(...), db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    proposta = db.query(Proposta).filter(Proposta.id == proposta_id).first()
    if not proposta:
        raise HTTPException(status_code=404, detail="Proposta não encontrada")
    upload_dir = "uploaded_propostas"
    os.makedirs(upload_dir, exist_ok=True)
    file_path = os.path.join(upload_dir, f"proposta_{proposta_id}_{file.filename}")
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    proposta.arquivo_pdf = file_path
    db.commit()
    db.refresh(proposta)
    return {"msg": "Arquivo PDF enviado com sucesso", "arquivo_pdf": file_path}

@router.post("/item/{proposta_id}/upload_docx")
def upload_proposta_docx(proposta_id: int, file: UploadFile = File(...), db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    proposta = db.query(Proposta).filter(Proposta.id == proposta_id).first()
    if not proposta:
        raise HTTPException(status_code=404, detail="Proposta não encontrada")
    upload_dir = "uploaded_propostas"
    os.makedirs(upload_dir, exist_ok=True)
    file_path = os.path.join(upload_dir, f"proposta_{proposta_id}_{file.filename}")
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    proposta.arquivo_docx = file_path
    db.commit()
    db.refresh(proposta)
    return {"msg": "Arquivo DOCX enviado com sucesso", "arquivo_docx": file_path}


# END FILE CONTENTS


# File: main.py

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from routers import auth_router, users_router, rfps_router, vendors_router, bom_router, propostas_router

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(auth_router.router)
app.include_router(users_router.router)
app.include_router(rfps_router.router)
app.include_router(vendors_router.router)
app.include_router(bom_router.router)
app.include_router(propostas_router.router)

@app.get("/")
def root():
    return {"message": "RFP Automation API online"}


# END FILE CONTENTS


# File: test.py

from passlib.context import CryptContext
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
print(pwd_context.hash("123qweASD"))

# END FILE CONTENTS


# File: routers/users_router.py

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from models import User
from auth import get_db, get_password_hash, get_current_user

router = APIRouter(prefix="/users", tags=["users"])

@router.post("/")
def create_user(nome: str, email: str, senha: str, perfil: str, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user.perfil != 'admin':
        raise HTTPException(status_code=403, detail="Acesso negado")
    if db.query(User).filter(User.email == email).first():
        raise HTTPException(status_code=400, detail="E-mail já cadastrado")
    user = User(nome=nome, email=email, senha_hash=get_password_hash(senha), perfil=perfil)
    db.add(user)
    db.commit()
    db.refresh(user)
    return {"id": user.id, "nome": user.nome, "email": user.email, "perfil": user.perfil}

@router.get("/")
def list_users(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user.perfil != 'admin':
        raise HTTPException(status_code=403, detail="Acesso negado")
    users = db.query(User).all()
    return [{"id": u.id, "nome": u.nome, "email": u.email, "perfil": u.perfil, "ativo": u.ativo} for u in users]


# END FILE CONTENTS


# File: .env.example

# Exemplo de variáveis de ambiente
POSTGRES_USER=rfp_user
POSTGRES_PASSWORD=rfp_pass
POSTGRES_DB=rfp_db
POSTGRES_HOST=db
POSTGRES_PORT=5432
SECRET_KEY=uma-chave-secreta
JWT_ALGORITHM=HS256
S3_BUCKET=nome-do-bucket
SUPABASE_URL=https://xxxx.supabase.co
SUPABASE_KEY=chave_supabase
OPENAI_API_KEY=sua-chave-openai
AZURE_VISION_KEY=sua-chave-azure


# END FILE CONTENTS


# File: requirements.txt

fastapi
uvicorn
sqlalchemy
psycopg2-binary
python-jose[cryptography]
bcrypt
passlib[bcrypt]
python-multipart
pydantic
python-dotenv
requests
httpx
docxtpl
weasyprint
boto3
supabase


# END FILE CONTENTS


# File: .gptree_config

# GPTree Local Config
version: 2

# Whether to use .gitignore
useGitIgnore: true
# File types to include (e.g., .py,.js)
includeFileTypes: *
# File types to exclude when includeFileTypes is '*'
excludeFileTypes: 
# Output file name
outputFile: gptree_output.txt
# Whether to output the file locally or relative to the project directory
outputFileLocally: true
# Whether to copy the output to the clipboard
copyToClipboard: false
# Whether to use safe mode (prevent overly large files from being combined)
safeMode: true
# Whether to store the files chosen in the config file (--save, -s)
storeFilesChosen: true
# Whether to include line numbers in the output (--line-numbers, -n)
lineNumbers: false
# Whether to show ignored files in the directory tree
showIgnoredInTree: false
# Whether to show only default ignored files in the directory tree while still respecting gitignore
showDefaultIgnoredInTree: false
# Previously selected files (when using the -s or --save flag previously)
previousFiles: 


# END FILE CONTENTS


# File: routers/bom_router.py

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from models import BoMItem, User, RFP
from auth import get_db, get_current_user
from pydantic import BaseModel

class BoMItemCreate(BaseModel):
    descricao: str
    modelo: str
    part_number: str
    quantidade: int

class BoMItemUpdate(BaseModel):
    descricao: str = None
    modelo: str = None
    part_number: str = None
    quantidade: int = None

router = APIRouter(prefix="/bom", tags=["bom"])

@router.get("/rfp/{rfp_id}", response_model=List[BoMItemCreate])
def list_bom_items(rfp_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    bom_items = db.query(BoMItem).filter(BoMItem.rfp_id == rfp_id).all()
    return bom_items

@router.post("/rfp/{rfp_id}", response_model=BoMItemCreate)
def create_bom_item(rfp_id: int, item: BoMItemCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    rfp = db.query(RFP).filter(RFP.id == rfp_id).first()
    if not rfp:
        raise HTTPException(status_code=404, detail="RFP não encontrada")
    new_item = BoMItem(rfp_id=rfp_id, **item.dict())
    db.add(new_item)
    db.commit()
    db.refresh(new_item)
    return new_item

@router.get("/item/{item_id}", response_model=BoMItemCreate)
def get_bom_item(item_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    item = db.query(BoMItem).filter(BoMItem.id == item_id).first()
    if not item:
        raise HTTPException(status_code=404, detail="Item de BoM não encontrado")
    return item

@router.put("/item/{item_id}", response_model=BoMItemCreate)
def update_bom_item(item_id: int, item_update: BoMItemUpdate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    item = db.query(BoMItem).filter(BoMItem.id == item_id).first()
    if not item:
        raise HTTPException(status_code=404, detail="Item de BoM não encontrado")
    for field, value in item_update.dict(exclude_unset=True).items():
        setattr(item, field, value)
    db.commit()
    db.refresh(item)
    return item

@router.delete("/item/{item_id}")
def delete_bom_item(item_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    item = db.query(BoMItem).filter(BoMItem.id == item_id).first()
    if not item:
        raise HTTPException(status_code=404, detail="Item de BoM não encontrado")
    db.delete(item)
    db.commit()
    return {"ok": True}


# END FILE CONTENTS


# File: routers/auth_router.py

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from auth import authenticate_user, create_access_token, get_db
from models import User

router = APIRouter(prefix="/auth", tags=["auth"])

@router.post("/login")
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="E-mail ou senha inválidos")
    access_token = create_access_token(data={"sub": user.email})
    return {"access_token": access_token, "token_type": "bearer", "perfil": user.perfil, "nome": user.nome}


# END FILE CONTENTS


# File: routers/rfps_router.py

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from models import RFP, User
from auth import get_db, get_current_user
from pydantic import BaseModel

class RFPCreate(BaseModel):
    nome: str
    status: str = "Análise"

class RFPUpdate(BaseModel):
    nome: str = None
    status: str = None

router = APIRouter(prefix="/rfps", tags=["rfps"])

@router.get("/", response_model=List[RFPCreate])
def list_rfps(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user.perfil == 'admin':
        rfps = db.query(RFP).all()
    else:
        rfps = db.query(RFP).filter(RFP.user_id == current_user.id).all()
    return rfps

@router.post("/", response_model=RFPCreate)
def create_rfp(rfp: RFPCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    new_rfp = RFP(nome=rfp.nome, status=rfp.status, user_id=current_user.id)
    db.add(new_rfp)
    db.commit()
    db.refresh(new_rfp)
    return new_rfp

@router.get("/{rfp_id}", response_model=RFPCreate)
def get_rfp(rfp_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    rfp = db.query(RFP).filter(RFP.id == rfp_id).first()
    if not rfp or (current_user.perfil != 'admin' and rfp.user_id != current_user.id):
        raise HTTPException(status_code=404, detail="RFP não encontrada")
    return rfp

@router.put("/{rfp_id}", response_model=RFPCreate)
def update_rfp(rfp_id: int, rfp_update: RFPUpdate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    rfp = db.query(RFP).filter(RFP.id == rfp_id).first()
    if not rfp or (current_user.perfil != 'admin' and rfp.user_id != current_user.id):
        raise HTTPException(status_code=404, detail="RFP não encontrada")
    if rfp_update.nome:
        rfp.nome = rfp_update.nome
    if rfp_update.status:
        rfp.status = rfp_update.status
    db.commit()
    db.refresh(rfp)
    return rfp

@router.delete("/{rfp_id}")
def delete_rfp(rfp_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    rfp = db.query(RFP).filter(RFP.id == rfp_id).first()
    if not rfp:
        raise HTTPException(status_code=404, detail="RFP não encontrada")
    if current_user.perfil != 'admin':
        raise HTTPException(status_code=403, detail="Apenas administradores podem remover RFPs")
    db.delete(rfp)
    db.commit()
    return {"ok": True}

# --- NOVOS ENDPOINTS ---
from fastapi import UploadFile, File
import shutil
import os

@router.post("/{rfp_id}/upload")
def upload_rfp_file(rfp_id: int, file: UploadFile = File(...), db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    rfp = db.query(RFP).filter(RFP.id == rfp_id).first()
    if not rfp or (current_user.perfil != 'admin' and rfp.user_id != current_user.id):
        raise HTTPException(status_code=404, detail="RFP não encontrada")
    upload_dir = "uploaded_rfps"
    os.makedirs(upload_dir, exist_ok=True)
    file_path = os.path.join(upload_dir, f"rfp_{rfp_id}_{file.filename}")
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    rfp.arquivo_url = file_path
    db.commit()
    db.refresh(rfp)
    return {"msg": "Arquivo enviado com sucesso", "arquivo_url": file_path}

@router.post("/{rfp_id}/analyze")
def analyze_rfp(rfp_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    # Aqui você pode integrar com OpenAI ou Azure
    rfp = db.query(RFP).filter(RFP.id == rfp_id).first()
    if not rfp or (current_user.perfil != 'admin' and rfp.user_id != current_user.id):
        raise HTTPException(status_code=404, detail="RFP não encontrada")
    if not rfp.arquivo_url:
        raise HTTPException(status_code=400, detail="Nenhum arquivo enviado para esta RFP")
    # Exemplo: análise dummy
    resultado = {"resumo": f"Análise automática do arquivo {rfp.arquivo_url}"}
    return resultado


# END FILE CONTENTS


# File: routers/vendors_router.py

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from models import Vendor, User
from auth import get_db, get_current_user
from pydantic import BaseModel

class VendorCreate(BaseModel):
    nome: str
    contato: str = None
    observacoes: str = None

class VendorUpdate(BaseModel):
    nome: str = None
    contato: str = None
    observacoes: str = None

router = APIRouter(prefix="/vendors", tags=["vendors"])

@router.get("/", response_model=List[VendorCreate])
def list_vendors(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    vendors = db.query(Vendor).all()
    return vendors

@router.post("/", response_model=VendorCreate)
def create_vendor(vendor: VendorCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    new_vendor = Vendor(**vendor.dict())
    db.add(new_vendor)
    db.commit()
    db.refresh(new_vendor)
    return new_vendor

@router.get("/{vendor_id}", response_model=VendorCreate)
def get_vendor(vendor_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    vendor = db.query(Vendor).filter(Vendor.id == vendor_id).first()
    if not vendor:
        raise HTTPException(status_code=404, detail="Fornecedor não encontrado")
    return vendor

@router.put("/{vendor_id}", response_model=VendorCreate)
def update_vendor(vendor_id: int, vendor_update: VendorUpdate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    vendor = db.query(Vendor).filter(Vendor.id == vendor_id).first()
    if not vendor:
        raise HTTPException(status_code=404, detail="Fornecedor não encontrado")
    for field, value in vendor_update.dict(exclude_unset=True).items():
        setattr(vendor, field, value)
    db.commit()
    db.refresh(vendor)
    return vendor

@router.delete("/{vendor_id}")
def delete_vendor(vendor_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    vendor = db.query(Vendor).filter(Vendor.id == vendor_id).first()
    if not vendor:
        raise HTTPException(status_code=404, detail="Fornecedor não encontrado")
    db.delete(vendor)
    db.commit()
    return {"ok": True}


# END FILE CONTENTS


# File: Dockerfile

FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]


# END FILE CONTENTS


# File: auth.py

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from sqlalchemy.orm import Session
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from models import User
from database import SessionLocal

load_dotenv()

SECRET_KEY = os.getenv('SECRET_KEY', 'uma-chave-secreta')
ALGORITHM = os.getenv('JWT_ALGORITHM', 'HS256')
ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def get_user_by_email(db: Session, email: str):
    return db.query(User).filter(User.email == email).first()

def authenticate_user(db: Session, email: str, password: str):
    user = get_user_by_email(db, email)
    if not user or not verify_password(password, user.senha_hash):
        return None
    return user

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email: str = payload.get("sub")
        if email is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    user = get_user_by_email(db, email)
    if user is None:
        raise credentials_exception
    return user


# END FILE CONTENTS


# File: models.py

from sqlalchemy import Column, Integer, String, Boolean, ForeignKey, DateTime, Text
from sqlalchemy.orm import relationship, declarative_base
import datetime

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    nome = Column(String, nullable=False)
    email = Column(String, unique=True, index=True, nullable=False)
    senha_hash = Column(String, nullable=False)
    perfil = Column(String, nullable=False)  # 'admin' ou 'editor'
    ativo = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

class Vendor(Base):
    __tablename__ = 'vendors'
    id = Column(Integer, primary_key=True, index=True)
    nome = Column(String, nullable=False)
    contato = Column(String)
    observacoes = Column(Text)

class RFP(Base):
    __tablename__ = 'rfps'
    id = Column(Integer, primary_key=True, index=True)
    nome = Column(String, nullable=False)
    status = Column(String, nullable=False)
    user_id = Column(Integer, ForeignKey('users.id'))
    vendor_id = Column(Integer, ForeignKey('vendors.id'))
    arquivo_url = Column(String)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)

class BoMItem(Base):
    __tablename__ = 'bom_items'
    id = Column(Integer, primary_key=True, index=True)
    rfp_id = Column(Integer, ForeignKey('rfps.id'))
    descricao = Column(String)
    modelo = Column(String)
    part_number = Column(String)
    quantidade = Column(Integer)

class Proposta(Base):
    __tablename__ = 'propostas'
    id = Column(Integer, primary_key=True, index=True)
    rfp_id = Column(Integer, ForeignKey('rfps.id'))
    dados_json = Column(Text)
    arquivo_pdf = Column(String)
    arquivo_docx = Column(String)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)


# END FILE CONTENTS
